#!/dev/null




<< go / build / main / debug
	test "${#}" -eq 0
	exec -- "${X_RUN[@]}" ':: go / tool' build \
			-v \
			-o ./.outputs/main-debug.elf \
			-- ./sources/main.go \
		#
	exit -- 1
!!

<< go / build / main / release
	test "${#}" -eq 0
	exec -- "${X_RUN[@]}" ':: go / tool' build \
			-v \
			-ldflags '-s' \
			-o ./.outputs/main-release.elf \
			-- ./sources/main.go \
		#
	exit -- 1
!!

<< go / build / main / release / publish
	test "${#}" -eq 0
	printf -- '[ii]  building...\n' >&2
	"${X_RUN[@]}" ':: go / build / main / release'
	if test ! -e ./.outputs/publish ; then
		mkdir -- ./.outputs/publish
	fi
	if test ! -e ./.outputs/publish/bin ; then
		mkdir -- ./.outputs/publish/bin
	fi
	cat \
		< ./.outputs/main-release.elf \
		>| ./.outputs/publish/bin/sink.elf \
	#
	printf -- '[ii]  compressing gz...\n' >&2
	gzip -9 \
		< ./.outputs/main-release.elf \
		>| ./.outputs/publish/bin/sink.elf.gz \
	#
	printf -- '[ii]  compressing bz2...\n' >&2
	bzip2 -9 \
		< ./.outputs/main-release.elf \
		>| ./.outputs/publish/bin/sink.elf.bz2 \
	#
	printf -- '[ii]  compressing xz...\n' >&2
	xz -9 -F xz -C sha256 -T 1 \
		< ./.outputs/main-release.elf \
		>| ./.outputs/publish/bin/sink.elf.xz \
	#
	exit -- 0
!!

<< publish
	test "${#}" -eq 0
	printf -- '[ii]  publishing to `https://data.volution.ro/ciprian/feb285596a999a6e31a790700a0d5db1`...\n' >&2
	exec -- rsync -a -v -- ./.outputs/publish/ ./.publish/
	exit -- 1
!!




<< go / execute / main
	"${X_RUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main-debug.elf "${@}"
	exit -- 1
!!


<< go / execute / main / udp + stdout-only / rfc5424
	"${X_RUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main-debug.elf \
			--input-syslog-listen-udp 127.35.195.99:8514 \
			--input-syslog-format rfc5424 \
			--input-syslog-json=true \
			--output-stdout-json-pretty=true \
			--parser-message-raw=false \
			--report-timeout 6s \
			"${@}" \
		#
	exit -- 1
!!

<< go / execute / main / udp + stdout-only / rfc3164
	"${X_RUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main-debug.elf \
			--input-syslog-listen-udp 127.35.195.99:8514 \
			--input-syslog-format rfc3164 \
			--input-syslog-json=true \
			--output-stdout-json-pretty=true \
			--parser-message-raw=false \
			--report-timeout 6s \
			"${@}" \
		#
	exit -- 1
!!

<< go / execute / main / http + stdout-only
	"${X_RUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main-debug.elf \
			--input-http-listen-tcp 127.35.195.99:8080 \
			--input-http-json=true \
			--output-stdout-json-pretty=true \
			--parser-message-raw=false \
			--report-timeout 6s \
			"${@}" \
		#
	exit -- 1
!!


<< go / execute / main / udp + stdout-only + jq / replace / rfc5424
	"${X_RUN[@]}" ':: go / build / main / debug'
	_jq_script='
			
			if (.application == "haproxy") then
				.message_extra = {
					request_id : .message_json.h_r_i,
					session_id : .message_json.h_s_i,
				}
				| if (.message_extra.request_id[0:1] >= "4") then
					.message_json = .message_extra
					| del (.message_extra)
					| del (.message_raw)
				else null end
			else
				null
			end
			
		'
	exec -- ./.outputs/main-debug.elf \
			--input-syslog-listen-udp 127.35.195.99:8514 \
			--input-syslog-format rfc5424 \
			--input-syslog-json=true \
			--output-stdout-json-pretty=true \
			--parser-message-raw=false \
			--parser-external-command 'jq --unbuffered @{script}' \
			--parser-external-script "${_jq_script}" \
			--parser-external-replace=true \
			--report-timeout 6s \
			"${@}" \
		#
	exit -- 1
!!

<< go / execute / main / udp + stdout-only + jq / extend / rfc5424
	"${X_RUN[@]}" ':: go / build / main / debug'
	_jq_script='
			
			if (.application == "haproxy") then
				{
					request_id : .message_json.h_r_i,
					session_id : .message_json.h_s_i,
				}
			else
				null
			end
			
		'
	exec -- ./.outputs/main-debug.elf \
			--input-syslog-listen-udp 127.35.195.99:8514 \
			--input-syslog-format rfc5424 \
			--input-syslog-json=true \
			--output-stdout-json-pretty=true \
			--parser-message-raw=false \
			--parser-external-command 'jq --unbuffered @{script}' \
			--parser-external-script "${_jq_script}" \
			--parser-external-replace=false \
			--report-timeout 6s \
			"${@}" \
		#
	exit -- 1
!!


<< go / execute / main / udp + file-only / rfc5424
	"${X_RUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main-debug.elf \
			--input-syslog-listen-udp 127.35.195.99:8514 \
			--input-syslog-format rfc5424 \
			--input-syslog-json=true \
			--output-stdout=false \
			--output-file-current-symlink ./.logs/tail \
			--output-file-current-store ./.logs/current \
			--output-file-archived-store ./.logs/archived \
			--output-file-archived-compress xz \
			--output-file-json-pretty=false \
			--output-file-messages 6 \
			--output-file-timeout 6s \
			--parser-message-raw=true \
			--report-timeout 6s \
			"${@}" \
		#
	exit -- 1
!!




<< generate / syslog / text / rfc5424
	test "${#}" -eq 0
	exec -- logger \
			--udp --server=127.35.195.99 --port=8514 --size=65535 \
			--rfc5424 \
			--tag="test" --msgid="text" --id=959317 \
			--stderr \
		< <(
			while true ; do
				printf -- '[~~]  message:  %s %s %s %s!\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
				sleep -- 1s
			done
		) \
	#
	exit -- 1
!!

<< generate / syslog / text / rfc3164
	test "${#}" -eq 0
	exec -- logger \
			--udp --server=127.35.195.99 --port=8514 --size=65535 \
			--rfc3164 \
			--tag="test" --msgid="text" --id=959317 \
			--stderr \
		< <(
			while true ; do
				printf -- '[~~]  message:  %s %s %s %s!\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
				sleep -- 1s
			done
		) \
	#
	exit -- 1
!!


<< generate / syslog / json / rfc5424
	test "${#}" -eq 0
	exec -- logger \
			--udp --server=127.35.195.99 --port=8514 --size=65535 \
			--rfc5424 \
			--tag="test" --msgid="json" --id=959317 \
			--stderr \
		< <(
			while true ; do
				printf -- '{"a":%s, "b":%s, "c":%s, "d":%s}\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
				sleep -- 1s
			done
		) \
	#
	exit -- 1
!!

<< generate / syslog / json / rfc3164
	test "${#}" -eq 0
	exec -- logger \
			--udp --server=127.35.195.99 --port=8514 --size=65535 \
			--rfc3164 \
			--tag="test" --msgid="json" --id=959317 \
			--stderr \
		< <(
			while true ; do
				printf -- '{"a":%s, "b":%s, "c":%s, "d":%s}\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
				sleep -- 1s
			done
		) \
	#
	exit -- 1
!!




<< generate / http / text
	test "${#}" -eq 0
	while true ; do
		printf -- '[--]\n' >&2
		curl \
				-i -s -f \
				-X POST \
				-H 'Content-Type: text/plain' \
				--data-binary @- \
				--retry 360 --retry-delay 1 --retry-connrefused \
				-- http://127.35.195.99:8080/push \
			< <(
				printf -- '[~~]  message:  %s, %s, %s, %s!\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
			) \
		#
		sleep -- 1s
	done
	exit -- 1
!!


<< generate / http / json
	test "${#}" -eq 0
	while true ; do
		printf -- '[--]\n' >&2
		curl \
				-i -s -f \
				-X POST \
				-H 'Content-Type: application/json' \
				--data-binary @- \
				--retry 360 --retry-delay 1 --retry-connrefused \
				-- http://127.35.195.99:8080/push \
			< <(
				printf -- '{"a":%s, "b":%s, "c":%s, "d":%s}\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
			) \
		#
		sleep -- 1s
	done
	exit -- 1
!!


<< generate / http / xml
	test "${#}" -eq 0
	while true ; do
		printf -- '[--]\n' >&2
		curl \
				-i -s -f \
				-X POST \
				-H 'Content-Type: application/xml' \
				--data-binary @- \
				--retry 360 --retry-delay 1 --retry-connrefused \
				-- http://127.35.195.99:8080/push \
			< <(
				printf -- '<test> <a>%s</a> <b>%s</b> <c>%s</c> <d>%s</d> </test>\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
			) \
		#
		sleep -- 1s
	done
	exit -- 1
!!




<< go / dependencies / update
	test "${#}" -eq 0
	exec -- "${X_RUN[@]}" ':: go / tool' get -v -d -- ./sources/...
	exit -- 1
!!




<< go / tool
	
	test "${#}" -ge 1
	
	test -d ./.outputs
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	
	export -- GOPATH="${_outputs}/go"
	exec -- go "${@}"
	
	exit -- 1
!!




<< sources / grep / codes
	test "${#}" -eq 0
	grep -o -P -e '(?<=\[)[0-9a-f]{8}(?=\])' -h -r . --include '*.go' | sort | uniq -d
	exit -- 0
!!



<< workspace / initialize / outputs
	
	test "${#}" -eq 0
	
	if test -d ./.outputs ; then
		exit -- 0
	fi
	
	_outputs_store="${TMPDIR:-/tmp}/go--${UID}--${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}"
	
	mkdir -- "${_outputs_store}"
	
	_outputs_store="$( exec -- readlink -e -- "${_outputs_store}" )"
	
	ln -s -f -T -- "${_outputs_store}" ./.outputs
	
	exit -- 0
!!


<< workspace / initialize / logs
	
	test "${#}" -eq 0
	
	if test -d ./.logs ; then
		exit -- 0
	fi
	
	test -d ./.outputs
	mkdir -- ./.outputs/logs
	
	ln -s -f -T -- ./.outputs/logs ./.logs
	
	exit -- 0
!!

