#!/dev/null




<< go / build / main / debug
	test "${#}" -eq 0
	exec -- "${X_RUN[@]}" ':: go / tool' build \
			-v \
			-o ./.outputs/main \
			-- ./sources/main.go \
		#
	exit -- 1
!!

<< go / build / main / release
	test "${#}" -eq 0
	exec -- "${X_RUN[@]}" ':: go / tool' build \
			-v \
			-ldflags '-s' \
			-o ./.outputs/main \
			-- ./sources/main.go \
		#
	exit -- 1
!!




<< go / execute / main
	"${X_RUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main "${@}"
	exit -- 1
!!


<< go / execute / main / udp + stdout-only / rfc5424
	"${X_RUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main \
			--input-syslog-listen-udp 127.35.195.99:8514 \
			--input-syslog-format rfc5424 \
			--output-stdout-json-pretty=true \
			--parser-message-json=true \
			--parser-message-raw=false \
			--report-timeout 6s \
			"${@}" \
		#
	exit -- 1
!!

<< go / execute / main / udp + stdout-only / rfc3164
	"${X_RUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main \
			--input-syslog-listen-udp 127.35.195.99:8514 \
			--input-syslog-format rfc3164 \
			--output-stdout-json-pretty=true \
			--parser-message-json=true \
			--parser-message-raw=false \
			--report-timeout 6s \
			"${@}" \
		#
	exit -- 1
!!


<< go / execute / main / udp + stdout-only + jq / replace / rfc5424
	"${X_RUN[@]}" ':: go / build / main / debug'
	_jq_script='
			
			if (.application == "haproxy") then
				.message_extra = {
					request_id : .message_json.h_r_i,
					session_id : .message_json.h_s_i,
				}
				| if (.message_extra.request_id[0:1] >= "4") then
					.message_json = .message_extra
					| del (.message_extra)
					| del (.message_raw)
				else null end
			else
				null
			end
			
		'
	exec -- ./.outputs/main \
			--input-syslog-listen-udp 127.35.195.99:8514 \
			--input-syslog-format rfc5424 \
			--output-stdout-json-pretty=true \
			--parser-message-json=true \
			--parser-message-raw=false \
			--report-timeout 6s \
			--parser-external-command 'jq --unbuffered @{script}' \
			--parser-external-script "${_jq_script}" \
			--parser-external-replace=true \
			"${@}" \
		#
	exit -- 1
!!

<< go / execute / main / udp + stdout-only + jq / extend / rfc5424
	"${X_RUN[@]}" ':: go / build / main / debug'
	_jq_script='
			
			if (.application == "haproxy") then
				{
					request_id : .message_json.h_r_i,
					session_id : .message_json.h_s_i,
				}
			else
				null
			end
			
		'
	exec -- ./.outputs/main \
			--input-syslog-listen-udp 127.35.195.99:8514 \
			--input-syslog-format rfc5424 \
			--output-stdout-json-pretty=true \
			--parser-message-json=true \
			--parser-message-raw=false \
			--report-timeout 6s \
			--parser-external-command 'jq --unbuffered @{script}' \
			--parser-external-script "${_jq_script}" \
			--parser-external-replace=false \
			"${@}" \
		#
	exit -- 1
!!


<< go / execute / main / udp + file-only / rfc5424
	"${X_RUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main \
			--input-syslog-listen-udp 127.35.195.99:8514 \
			--input-syslog-format rfc5424 \
			--output-stdout=false \
			--output-file-current-symlink ./.logs/tail \
			--output-file-current-store ./.logs/current \
			--output-file-archived-store ./.logs/archived \
			--output-file-archived-compress xz \
			--output-file-json-pretty=false \
			--output-file-messages 6 \
			--output-file-timeout 6s \
			--parser-message-json=true \
			--parser-message-raw=true \
			--report-timeout 6s \
			"${@}" \
		#
	exit -- 1
!!




<< log / text / rfc5424
	test "${#}" -eq 0
	exec -- logger \
			--udp --server=127.35.195.99 --port=8514 --size=65535 \
			--rfc5424 \
			--tag="test" --msgid="text" --id=959317 \
			--stderr \
		< <(
			while true ; do
				printf '[~~]  message:  %s %s %s %s!\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
				sleep -- 1s
			done
		) \
	#
	exit -- 1
!!

<< log / text / rfc3164
	test "${#}" -eq 0
	exec -- logger \
			--udp --server=127.35.195.99 --port=8514 --size=65535 \
			--rfc3164 \
			--tag="test" --msgid="text" --id=959317 \
			--stderr \
		< <(
			while true ; do
				printf '[~~]  message:  %s %s %s %s!\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
				sleep -- 1s
			done
		) \
	#
	exit -- 1
!!


<< log / json / rfc5424
	test "${#}" -eq 0
	exec -- logger \
			--udp --server=127.35.195.99 --port=8514 --size=65535 \
			--rfc5424 \
			--tag="test" --msgid="json" --id=959317 \
			--stderr \
		< <(
			while true ; do
				printf '{"a":%s, "b":%s, "c":%s, "d":%s}\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
				sleep -- 1s
			done
		) \
	#
	exit -- 1
!!

<< log / json / rfc3164
	test "${#}" -eq 0
	exec -- logger \
			--udp --server=127.35.195.99 --port=8514 --size=65535 \
			--rfc3164 \
			--tag="test" --msgid="json" --id=959317 \
			--stderr \
		< <(
			while true ; do
				printf '{"a":%s, "b":%s, "c":%s, "d":%s}\n' "${RANDOM}" "${RANDOM}" "${RANDOM}" "${RANDOM}"
				sleep -- 1s
			done
		) \
	#
	exit -- 1
!!




<< go / dependencies / update
	test "${#}" -eq 0
	exec -- "${X_RUN[@]}" ':: go / tool' get -v -d -- ./sources/...
	exit -- 1
!!




<< go / tool
	
	test "${#}" -ge 1
	
	test -d ./.outputs
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	
	export -- GOPATH="${_outputs}/go"
	exec -- go "${@}"
	
	exit -- 1
!!




<< workspace / initialize / outputs
	
	test "${#}" -eq 0
	
	if test -d ./.outputs ; then
		exit -- 0
	fi
	
	_outputs_store="${TMPDIR:-/tmp}/go--${UID}--${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}"
	
	mkdir -- "${_outputs_store}"
	
	_outputs_store="$( exec -- readlink -e -- "${_outputs_store}" )"
	
	ln -s -f -T -- "${_outputs_store}" ./.outputs
	
	exit -- 0
!!


<< workspace / initialize / logs
	
	test "${#}" -eq 0
	
	if test -d ./.logs ; then
		exit -- 0
	fi
	
	test -d ./.outputs
	mkdir -- ./.outputs/logs
	
	ln -s -f -T -- ./.outputs/logs ./.logs
	
	exit -- 0
!!

